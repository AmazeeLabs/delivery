<?php

/**
 * @file
 * Drupal hooks and helper functions.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\delivery\WorkspaceListBuilder;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_module_implements_alter().
 */
function delivery_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, ['entity_bundle_info_alter', 'entity_base_field_info_alter', 'entity_type_build'])) {
    $group = $implementations['delivery'];
    unset($implementations['delivery']);
    $implementations['delivery'] = $group;
  }
}

/**
 * Implements hook_entity_access().
 */
function delivery_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspacesManager */
  $workspacesManager = \Drupal::service('workspaces.manager');
  /** @var \Drupal\workspaces\WorkspaceAssociationInterface $workspaceAssociation */
  $workspaceAssociation = \Drupal::service('workspaces.association');

  if ($workspacesManager->isEntityTypeSupported($entity->getEntityType())) {
    $activeWorkspace = $workspacesManager->getActiveWorkspace();
    $trackingWorkspaces = $workspaceAssociation->getEntityTrackingWorkspaceIds($entity);
    if (!in_array($activeWorkspace->id(), $trackingWorkspaces)) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function delivery_entity_type_build(array &$entity_types) {
  // Override the list builder so we can inject our own deploy button.
  $entity_types['workspace']->setHandlerClass('list_builder', WorkspaceListBuilder::class);

  // Remove the workspace conflict constraint.
  foreach ($entity_types as $entityType) {
    $constraints = $entityType->getConstraints();
    unset($constraints['EntityWorkspaceConflict']);
    unset($constraints['EntityChanged']);
    // Mark file and crop entities internal. Questionable, I know.
    if ($entityType->id() === 'file' || $entityType->id() === 'crop') {
      $entityType->set('internal', TRUE);
    }
    // Allow to edit untranslatable fields.
    if (
      $entityType instanceof ContentEntityTypeInterface &&
      $entityType->isRevisionable() &&
      !$entityType->isInternal()
    ) {
      unset($constraints['EntityUntranslatableFields']);
    }
    $entityType->setConstraints($constraints);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for deliveries.
 */
function delivery_delivery_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $build['items'] = views_embed_view(
    'delivery_status',
    'embed',
    $entity->id()
  );
}

function delivery_form_field_config_edit_form_alter(&$form, FormStateInterface $formState) {
  /** @var \Drupal\field\FieldConfigInterface $entity */
  $entity = $formState->getFormObject()->getEntity();
  $form['third_party_settings']['conflict'] = [
    '#type' => 'details',
    '#title' => t('Conflict'),
    '#open' => TRUE,
    'blacklisted' => [
      '#type' => 'checkbox',
      '#title' => t('Blacklisted'),
      '#description' => t('Exclude this field from conflict resolution.'),
      '#default_value' => $entity->getThirdPartySetting('conflict', 'blacklisted', FALSE),
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function delivery_form_alter(&$form, FormStateInterface $formState, $formId) {
  // Ensure the revision revert confirmation form works in all workspaces.
  $formState->set('workspace_safe', TRUE);
  $formObject = $formState->getFormObject();

  // Set the default language to the current workspace primary language.
  if (
    $formObject instanceof EntityFormInterface &&
    $formObject->getEntity() instanceof ContentEntityInterface &&
    $formObject->getEntity()->isTranslatable() &&
    array_key_exists('langcode', $form)
  ) {
    $form['langcode']['#access'] = $formObject->getEntity()->isNew();
    if ($formObject->getEntity()->isNew()) {
      /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspaceManager */
      $workspaceManager = \Drupal::service('workspaces.manager');
      $workspace = $workspaceManager->getActiveWorkspace();
      if ($defaultLanguage = $workspace->primary_language->value) {
        $form['langcode']['widget'][0]['value']['#default_value'] = $defaultLanguage;
      }
      if (!$workspace->secondary_languages->value) {
        $form['langcode']['#access'] = FALSE;
      }
    }
  }
}


/**
 * Implements hook_entity_bundle_info_alter().
 */
function delivery_entity_bundle_info_alter(&$bundles) {
  // Make sure moderation states are never translatable.
  $bundles['content_moderation_state']['content_moderation_state']['translatable'] = FALSE;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function delivery_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  // Make sure all languages are always in the same moderation state.
  if (isset($fields['moderation_state'])) {
    $fields['moderation_state']->setTranslatable(FALSE);
  }
  // Make sure all languages are simultaneously published.
  if (isset($fields['status'])) {
    $fields['status']->setTranslatable(FALSE);
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 */
function delivery_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'user') {
    $fields['assigned_workspaces'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Assigned workspaces'))
      ->setDescription(t('The list of workspaces that are assigned to this user.'))
      ->setSetting('target_type', 'workspace')
      ->setSetting('handler', 'default')
      ->setDisplayOptions('view', array(
        'label' => 'above',
        'type' => 'entity_reference_label',
        'weight' => -3,
      ))
      ->setDisplayOptions('form', array(
        'type' => 'entity_reference_autocomplete',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'autocomplete_type' => 'tags',
          'placeholder' => '',
        ),
        'weight' => -3,
      ))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }
  return $fields;
}
